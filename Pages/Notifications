import React, { useState, useEffect } from "react";
import { User, Notification } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Bell, BellOff, Check, Trash2, UserPlus, Calendar, Camera, Users } from "lucide-react";
import { format } from "date-fns";

export default function Notifications() {
  const [user, setUser] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadNotifications();
  }, []);

  const loadNotifications = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);

      const userNotifications = await Notification.filter(
        { user_id: currentUser.id },
        "-created_date"
      );
      setNotifications(userNotifications);
    } catch (error) {
      console.error("Error loading notifications:", error);
    } finally {
      setLoading(false);
    }
  };

  const markAsRead = async (notificationId) => {
    try {
      await Notification.update(notificationId, { read: true });
      loadNotifications();
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const deleteNotification = async (notificationId) => {
    try {
      await Notification.delete(notificationId);
      loadNotifications();
    } catch (error) {
      console.error("Error deleting notification:", error);
    }
  };

  const markAllAsRead = async () => {
    try {
      const unreadNotifications = notifications.filter(n => !n.read);
      for (const notification of unreadNotifications) {
        await Notification.update(notification.id, { read: true });
      }
      loadNotifications();
    } catch (error) {
      console.error("Error marking all as read:", error);
    }
  };

  const getNotificationIcon = (type) => {
    const icons = {
      friend_request: UserPlus,
      party_invite: Calendar,
      party_update: Users,
      photo_tagged: Camera
    };
    return icons[type] || Bell;
  };

  const getNotificationColor = (type) => {
    const colors = {
      friend_request: "text-blue-600 bg-blue-50",
      party_invite: "text-green-600 bg-green-50",
      party_update: "text-purple-600 bg-purple-50",
      photo_tagged: "text-pink-600 bg-pink-50"
    };
    return colors[type] || "text-gray-600 bg-gray-50";
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="h-12 bg-gray-200 rounded"></div>
          <div className="space-y-4">
            {Array(5).fill(0).map((_, i) => (
              <div key={i} className="h-20 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const unreadCount = notifications.filter(n => !n.read).length;

  return (
    <div className="max-w-4xl mx-auto p-6 md:pr-6 space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
            <Bell className="w-8 h-8 text-blue-600" />
            Notifications
            {unreadCount > 0 && (
              <Badge className="bg-red-500 hover:bg-red-500 text-white">
                {unreadCount}
              </Badge>
            )}
          </h1>
          <p className="text-gray-500 mt-1">Stay updated with your social activities</p>
        </div>
        {unreadCount > 0 && (
          <Button onClick={markAllAsRead} variant="outline" className="gap-2">
            <Check className="w-4 h-4" />
            Mark All Read
          </Button>
        )}
      </div>

      {/* Notifications List */}
      {notifications.length === 0 ? (
        <Card className="text-center py-16 bg-gradient-to-br from-gray-50 to-slate-100">
          <CardContent>
            <BellOff className="w-20 h-20 mx-auto text-gray-400 mb-6" />
            <h3 className="text-xl font-semibold text-gray-600 mb-3">All caught up!</h3>
            <p className="text-gray-500 max-w-md mx-auto">
              When you receive friend requests, party invites, or other updates, they'll appear here.
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {notifications.map((notification) => {
            const IconComponent = getNotificationIcon(notification.type);
            const colorClass = getNotificationColor(notification.type);
            
            return (
              <Card
                key={notification.id}
                className={`transition-all duration-200 hover:shadow-md ${
                  notification.read 
                    ? "bg-white/60 border-gray-200" 
                    : "bg-white border-blue-200 shadow-md"
                }`}
              >
                <CardContent className="p-6">
                  <div className="flex items-start gap-4">
                    <div className={`p-3 rounded-full ${colorClass}`}>
                      <IconComponent className="w-5 h-5" />
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-start justify-between gap-2">
                        <div>
                          <h3 className={`font-semibold ${
                            notification.read ? "text-gray-700" : "text-gray-900"
                          }`}>
                            {notification.title}
                          </h3>
                          <p className={`mt-1 ${
                            notification.read ? "text-gray-500" : "text-gray-600"
                          }`}>
                            {notification.message}
                          </p>
                          <p className="text-sm text-gray-400 mt-2">
                            {format(new Date(notification.created_date), "MMM d, yyyy 'at' h:mm a")}
                          </p>
                        </div>
                        
                        <div className="flex items-center gap-2 shrink-0">
                          {!notification.read && (
                            <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                          )}
                          
                          <div className="flex gap-1">
                            {!notification.read && (
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => markAsRead(notification.id)}
                                className="h-8 w-8 p-0"
                              >
                                <Check className="w-4 h-4" />
                              </Button>
                            )}
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => deleteNotification(notification.id)}
                              className="h-8 w-8 p-0 text-gray-400 hover:text-red-600"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Empty State for Read Notifications */}
      {notifications.length > 0 && unreadCount === 0 && (
        <Card className="bg-green-50 border-green-200">
          <CardContent className="p-6 text-center">
            <Check className="w-12 h-12 mx-auto text-green-600 mb-3" />
            <h3 className="font-semibold text-green-800 mb-1">You're all caught up!</h3>
 