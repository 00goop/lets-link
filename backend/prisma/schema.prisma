generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

enum PartyType {
  recreational
  dining
  family_vacation
  entertainment
  shopping
  educational
}

enum PartyStatus {
  planning
  confirmed
  completed
  cancelled
}

enum PartyMemberStatus {
  pending
  confirmed
  declined
}

enum NotificationType {
  friend_request
  party_invite
  party_update
  photo_tagged
}

enum FriendStatus {
  pending
  accepted
  declined
  blocked
}

enum PollStatus {
  open
  closed
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password_hash        String
  full_name            String
  username             String?       @unique
  bio                  String?
  location             String?
  interests            String?
  phone                String?
  profile_picture_url  String?
  role                 UserRole      @default(user)
  created_date         DateTime      @default(now())
  updated_date         DateTime      @updatedAt
  last_login           DateTime?

  parties_hosted       Party[]       @relation("PartyHost")
  party_memberships    PartyMember[]
  photos               Photo[]       @relation("PhotoUploader")
  polls                Poll[]        @relation("PollCreator")
  votes                Vote[]
  notifications        Notification[]
  friend_requests      Friend[]      @relation("FriendRequestor")
  friend_responses     Friend[]      @relation("FriendRecipient")
}

model Party {
  id                 String        @id @default(uuid())
  title              String
  description        String?
  type               PartyType
  host_id            String
  host               User          @relation("PartyHost", fields: [host_id], references: [id])
  join_code          String        @unique
  max_size           Int?
  status             PartyStatus   @default(planning)
  scheduled_date     DateTime?
  location_name      String?
  location_address   String?
  member_ids         String[]      @default([])
  created_date       DateTime      @default(now())
  updated_date       DateTime      @updatedAt

  members            PartyMember[]
  photos             Photo[]
  polls              Poll[]
}

model PartyMember {
  id             String            @id @default(uuid())
  party_id       String
  user_id        String
  status         PartyMemberStatus @default(confirmed)
  location_lat   Float?
  location_lng   Float?
  location_name  String?
  created_date   DateTime          @default(now())
  updated_date   DateTime          @updatedAt

  party          Party             @relation(fields: [party_id], references: [id])
  user           User              @relation(fields: [user_id], references: [id])

  @@unique([party_id, user_id])
}

model Notification {
  id            String            @id @default(uuid())
  user_id       String
  type          NotificationType
  title         String
  message       String
  read          Boolean           @default(false)
  related_id    String?
  created_date  DateTime          @default(now())
  updated_date  DateTime          @updatedAt

  user          User              @relation(fields: [user_id], references: [id])
}

model Photo {
  id            String    @id @default(uuid())
  party_id      String
  uploader_id   String
  file_url      String
  caption       String?
  likes         String[]  @default([])
  created_date  DateTime  @default(now())
  updated_date  DateTime  @updatedAt

  party         Party     @relation(fields: [party_id], references: [id])
  uploader      User      @relation("PhotoUploader", fields: [uploader_id], references: [id])
}

model Poll {
  id            String     @id @default(uuid())
  party_id      String
  created_by    String
  question      String
  options       String[]
  status        PollStatus @default(open)
  created_date  DateTime   @default(now())
  updated_date  DateTime   @updatedAt

  party         Party      @relation(fields: [party_id], references: [id])
  creator       User       @relation("PollCreator", fields: [created_by], references: [id])
  votes         Vote[]
}

model Vote {
  id              String    @id @default(uuid())
  poll_id         String
  user_id         String
  selected_option String
  created_date    DateTime  @default(now())
  updated_date    DateTime  @updatedAt

  poll            Poll      @relation(fields: [poll_id], references: [id])
  user            User      @relation(fields: [user_id], references: [id])

  @@unique([poll_id, user_id])
}

model Friend {
  id             String       @id @default(uuid())
  requester_id   String
  recipient_id   String
  status         FriendStatus @default(pending)
  created_date   DateTime     @default(now())
  updated_date   DateTime     @updatedAt

  requester      User         @relation("FriendRequestor", fields: [requester_id], references: [id])
  recipient      User         @relation("FriendRecipient", fields: [recipient_id], references: [id])

  @@unique([requester_id, recipient_id])
}
